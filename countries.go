// Code generated by gowsdl DO NOT EDIT.

package main

import (
	"context"
	"encoding/xml"
	"time"

	"github.com/hooklift/gowsdl/soap"
)

// against "unused imports"
var _ time.Time
var _ xml.Name

type AnyType struct {
	InnerXML string `xml:",innerxml"`
}

type AnyURI string

type NCName string

type Currency string

const (
	CurrencyGBP Currency = "GBP"

	CurrencyEUR Currency = "EUR"

	CurrencyPLN Currency = "PLN"
)

type GetCountryRequest struct {
	XMLName xml.Name `xml:"http://spring.io/guides/gs-producing-web-service getCountryRequest"`

	Name string `xml:"name,omitempty" json:"name,omitempty"`
}

type GetCountryResponse struct {
	XMLName xml.Name `xml:"http://spring.io/guides/gs-producing-web-service getCountryResponse"`

	Country *Country `xml:"country,omitempty" json:"country,omitempty"`
}

type Country struct {
	XMLName xml.Name `xml:"http://spring.io/guides/gs-producing-web-service country"`

	Name string `xml:"name,omitempty" json:"name,omitempty"`

	Population int32 `xml:"population,omitempty" json:"population,omitempty"`

	Capital string `xml:"capital,omitempty" json:"capital,omitempty"`

	Currency *Currency `xml:"currency,omitempty" json:"currency,omitempty"`
}

type CountriesPort interface {
	GetCountry(request *GetCountryRequest) (*GetCountryResponse, error)

	GetCountryContext(ctx context.Context, request *GetCountryRequest) (*GetCountryResponse, error)
}

type countriesPort struct {
	client *soap.Client
}

func NewCountriesPort(client *soap.Client) CountriesPort {
	return &countriesPort{
		client: client,
	}
}

func (service *countriesPort) GetCountryContext(ctx context.Context, request *GetCountryRequest) (*GetCountryResponse, error) {
	response := new(GetCountryResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *countriesPort) GetCountry(request *GetCountryRequest) (*GetCountryResponse, error) {
	return service.GetCountryContext(
		context.Background(),
		request,
	)
}
